# 机场订阅，名称不能重复
proxy-providers:
  Airport_01:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: "订阅链接1"
      interval: 300
    proxy:  直连
    url: "订阅链接1"  
  Airport_02:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy:  直连
    url: "订阅链接2"
      
# 用于下载订阅时指定UA
global-ua: clash.meta
    
# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: false
allow-lan: true
unified-delay: true
tcp-concurrent: true
# interface-name: eth0  （路由器下根据情况指定出站接口）
authentication:
  - name:passwd
  
geodata-mode: false
# GEO 文件加载模式（standard：标准加载器/memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值)）
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
geox-url:
  geosite: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.metadb"
  geoip: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  asn: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"
  
# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: ui
external-ui-url: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"
# 下载面板地址可更换：https://mirror.ghproxy.com/https://github.com/MetaCubeX/Yacd-meta/archive/gh-pages.zip

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 30

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true
  
# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    
# 代理模式
tun:
  enable: true
  stack: mixed
  mtu: 9000
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true
  
# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  # 模式切换 redir-host / fake-ip
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  # 模式切换 whitelist/blacklist 
  # 黑名单模式表示如果匹配成功则不返回 Fake-IP, 白名单模式时只有匹配成功才返回 Fake-IP
  fake-ip-filter-mode: blacklist
  fake-ip-filter:                          # Fake-ip 过滤，列表中的域名返回真实IP
    - "+.lan"
    - "+.local"
    - geosite:private
    - geosite:cn
    - "+.395313.xyz"
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver-policy:
    "rule-set:private_domain,cn_domain":
    - 223.5.5.5
    - 119.29.29.29
    "rule-set:geolocation-!cn":
      - "https://dns.cloudflare.com/dns-query"
      - "https://dns.google/dns-query"
 
proxies:
- name: "直连"
  type: direct
  udp: true   
 
# 策略组
proxy-groups:
#分流分组
  - {name: 节点选择, type: select, proxies: [ 自动故转, 香港自动, 美国节点, 自动选择, 全部节点], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Static.png }
  - {name: 全部节点, type: select, include-all: true, filter: "^((?!(直连)).)*$",  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Enet.png }
  - {name: YouTube, type: select, proxies: [ 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/YouTube.png }
  - {name: Google, type: select, proxies: [ 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Google.png }
  - {name: ChatGPT, type: select, proxies: [ 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/OpenAI.png }
  - {name: GitHub, type: select, proxies: [ 节点选择,直连], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/github.png }
  - {name: Microsoft, type: select, proxies: [直连, 节点选择 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Microsoft.png }  
  - {name: OneDrive, type: select, proxies: [ 节点选择], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/OneDrive.png }  
  - {name: TikTok, type: select, proxies: [ 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/TikTok.png }  
  - {name: Speedtest, type: select, proxies: [ 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Speedtest.png }  
  - {name: PayPal, type: select, proxies: [ 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Paypal.png }  
  - {name: Spotify, type: select, proxies: [直连, 节点选择 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Spotify.png }
# - {name: Cloudflare, type: select, proxies: [直连, 节点选择 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Catnet.png }
  - {name: Telegram, type: select, proxies: [ 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Telegram.png }
  - {name: NETFLIX, type: select, proxies: [ 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Netflix.png }
  - {name: Apple, type: select, proxies: [直连, 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Apple.png }
  - {name: 全球直连, type: select, proxies: [直连, 节点选择], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/ASN.png }
  - {name: 漏网之鱼, type: select, proxies: [ 节点选择,直连], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/China.png }

#节点分组
  - {name: 自动故转, type: fallback, interval: 300, proxies: [ 香港故转, 港美故转, 全节故转],  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Kedou.png }
  - {name: 香港故转, type: fallback, include-all: true, interval: 300, filter: "(?=.*(港|HK|HK2|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$",  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/StreamingSE.png }
  - {name: 港美故转, type: fallback, include-all: true, interval: 300, filter: "(?=.*(港|HK|HK2|US|(?i)Hong))^((?!(SG|台|韩|新|NG)).)*$",  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Available.png  }
  - {name: 全节故转, type: fallback, include-all: true, interval: 300, filter: "^((?!(直连)).)*$", icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Global.png }
  - {name: 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$",  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Urltest.png }
  - {name: 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$",  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Godetia.png }
  - {name: 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong",  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png }
  - {name: 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan",  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png }
  - {name: 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states",  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png }


# 分流Policy 
rules:
  - RULE-SET,private_domain,直连
  - RULE-SET,direct1, 全球直连
  - RULE-SET,proxy1, 节点选择
  - RULE-SET,apple_domain, Apple
  - RULE-SET,proxylite, 节点选择
  - RULE-SET,ai, ChatGPT
  - RULE-SET,ai-classical, ChatGPT
  - RULE-SET,github_domain, GitHub
  - RULE-SET,youtube_domain, YouTube
  - RULE-SET,twitter_domain, 节点选择
  - RULE-SET,spotify_domain, Spotify
  - RULE-SET,bilibili_domain, 全球直连
  - RULE-SET,google_domain, Google
  - RULE-SET,onedrive_domain, OneDrive
  - RULE-SET,microsoft_domain, Microsoft
  - RULE-SET,tiktok_domain, TikTok
  - RULE-SET,speedtest_domain, Speedtest
  - RULE-SET,telegram_domain, Telegram
  - RULE-SET,netflix_domain, NETFLIX
  - RULE-SET,paypal_domain, PayPal
# - RULE-SET,cloudflare_domain, Cloudflare
  - RULE-SET,geolocation-!cn, 节点选择
  - RULE-SET,gfw_domain, 节点选择
  - RULE-SET,cn_domain, 全球直连
  - RULE-SET,google_ip, Google,no-resolve
  - RULE-SET,netflix_ip, NETFLIX,no-resolve
  - RULE-SET,telegram_ip, Telegram,no-resolve
  - RULE-SET,cn_ip, 全球直连
  - MATCH, 漏网之鱼

# 分流锚点 
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  domainplus: &domainplus {type: http, interval: 86400, behavior: domain, format: text}
  class: &class {type: http, interval: 1800, behavior: classical, format: text}

# 远程规则 
rule-providers: 
  #自用规则
  direct1: { <<: *class, url: "https://raw.githubusercontent.com/Nana2222/Rules/refs/heads/main/Direct.list" }
  proxy1: { <<: *class, url: "https://raw.githubusercontent.com/Nana2222/Rules/refs/heads/main/ProxyLite.list" }
  
  #qcy自定义测试规则
  proxylite: { <<: *domainplus, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/master/ProxyLite.list" }
  ai: { <<: *domainplus, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/master/AI.list" }
  
  #正式规则
  
  # 隐私网络/局域网
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }

  # 人工智能
  ai-classical: {<<: *class,  url: https://raw.githubusercontent.com/luestr/ProxyResource/refs/heads/main/Tool/Loon/Rule/AI.list}
  
  # 油管视频
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  
  # Cloudflare
#  cloudflare_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cloudflare.mrs" }
  
  # Twitter
  twitter_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/twitter.mrs" }
  
  # Bilibili
  bilibili_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bilibili.mrs" } 
  
  # Spotify
  spotify_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.mrs" }  
  
  # 谷歌服务
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  
  # GitHub
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  
  # 电报信息
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  
  # Netflix
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
  
  # Paypal
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs" }
  
  # Onedrive
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs" }

  # 微软服务
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  
  # 苹果服务
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }

  # Speedtest
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  
  # Tiktok
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  
  # GFW
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  
  # 国外网站
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  
  # 国内网站
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
